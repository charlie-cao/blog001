[{"content":"这个世界我来了\n这开发效率有点高啊\n","date":"2022-03-06T00:00:00Z","image":"https://demo.stack.jimmycai.com/p/hello-world/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://demo.stack.jimmycai.com/p/hello-world/","title":"Hello World"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] One line code block 1 \u0026lt;p\u0026gt;A paragraph\u0026lt;/p\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2023-09-07T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo theme Stack supports the creation of interactive image galleries using Markdown. It\u0026rsquo;s powered by PhotoSwipe and its syntax was inspired by Typlog.\nTo use this feature, the image must be in the same directory as the Markdown file, as it uses Hugo\u0026rsquo;s page bundle feature to read the dimensions of the image. External images are not supported.\nSyntax 1 ![Image 1](1.jpg) ![Image 2](2.jpg) Result Photo by mymind and Luke Chesser on Unsplash\n","date":"2023-08-26T00:00:00Z","image":"https://demo.stack.jimmycai.com/p/image-gallery/2_hubce42636ecacc1a380b462f3110efcec_37455_120x120_fill_q75_box_smart1.jpg","permalink":"https://demo.stack.jimmycai.com/p/image-gallery/","title":"Image gallery"},{"content":"For more details, check out the documentation.\nBilibili video Tencent video YouTube video Generic video file Your browser doesn't support HTML5 video. Here is a link to the video instead. Gist GitLab Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Photo by Codioful on Unsplash\n","date":"2023-08-25T00:00:00Z","image":"https://demo.stack.jimmycai.com/p/shortcodes/cover_huec3c3e34981507583e214021ad1b9a4b_12942_120x120_fill_q75_box_smart1.jpg","permalink":"https://demo.stack.jimmycai.com/p/shortcodes/","title":"Shortcodes"},{"content":"Stack has built-in support for math typesetting using KaTeX.\nIt\u0026rsquo;s not enabled by default side-wide, but you can enable it for individual posts by adding math: true to the front matter. Or you can enable it side-wide by adding math = true to the params.article section in config.toml.\nInline math This is an inline mathematical expression: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\n1 $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$ Block math $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n1 2 3 $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi),e^{2 \\pi i \\xi x},d\\xi $$\n1 2 3 $$ f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi $$ ","date":"2023-08-24T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/math-typesetting/","title":"Math Typesetting"},{"content":"chmod的使用方法 chmod命令用于修改文件或目录的权限。\n常用使用方法如下：\n修改特定文件或目录权限：chmod [权限] [文件/目录] 例如：chmod 777 file.txt // 将file.txt文件的权限设置为rwxrwxrwx\n修改权限组：chmod [权限组] [文件/目录] 例如：chmod u+x file.txt // 将file.txt文件的所有者给予执行权限\n修改权限符号：chmod [权限修改符号] [权限] [文件/目录] 例如： chmod +x file.txt // 添加执行权限给文件 chmod -w file.txt // 移除文件的写权限\n使用数字形式表示权限：chmod [权限数字] [文件/目录] 例如：chmod 755 file.txt // 将file.txt文件的权限设置为rwxr-xr-x\n批量修改目录及其子目录权限：chmod -R [权限] [目录] 例如：chmod -R 777 directory // 将directory目录及其子目录的权限设置为rwxrwxrwx\n修改文件所有者：chown [新用户名] [文件] 例如：chown john file.txt // 将file.txt文件的所有者修改为john\n修改文件所属组：chgrp [新组名] [文件] 例如：chgrp users file.txt // 将file.txt文件的所属组修改为users\n在命令行中链式使用chmod和chown：chmod [权限] [文件] \u0026amp;\u0026amp; chown [新用户名] [文件] 例如：chmod 777 file.txt \u0026amp;\u0026amp; chown john file.txt // 将file.txt文件的权限设置为rwxrwxrwx并将所有者修改为john\n利用chmod符号赋予文件执行权限：chmod u+x [文件] 例如：chmod u+x script.sh // 给script.sh脚本文件的所有者添加执行权限\n应用chmod递归修改目录权限：find [目录] -type d -exec chmod [权限] {} ; 例如：find /path/to/directory -type d -exec chmod 755 {} ; // 将目录及其子目录的权限设置为rwxr-xr-x\n以上是常用的chmod使用方法，可以根据具体需求进行调整。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"curl的使用方法 curl是一个非常强大的命令行工具，用于与服务器进行数据交互。以下是curl的常用使用方法和常见实例：\n发送GET请求： curl https://example.com 发送GET请求并将响应输出到终端。\n发送POST请求： curl -X POST -d \u0026quot;param1=value1\u0026amp;param2=value2\u0026quot; https://example.com 发送POST请求并将参数以表单形式提交给服务器。\n发送PUT请求： curl -X PUT -d \u0026quot;data\u0026quot; https://example.com 发送PUT请求并将数据提交给服务器。\n发送DELETE请求： curl -X DELETE https://example.com 发送DELETE请求和指定的URL。\n下载文件： curl -O https://example.com/file.jpg 下载文件并将其保存到当前目录。\n上传文件： curl -F \u0026quot;file=@/path/to/file.jpg\u0026quot; https://example.com/upload 上传文件到指定的URL。\n设置请求头： curl -H \u0026quot;Content-Type: application/json\u0026quot; https://example.com 设置请求头中的Content-Type。\n设置cookie： curl -b \u0026quot;name=value\u0026quot; https://example.com 设置请求中的cookie。\n设置User-Agent： curl -A \u0026quot;Mozilla/5.0\u0026quot; https://example.com 设置请求中的User-Agent。\n设置代理： curl -x http://proxy.example.com:8080 https://example.com 使用代理请求URL。\n输出详细信息： curl -v https://example.com 输出请求和响应的详细信息。\n输出请求时间： curl -w \u0026quot;Total time: %{time_total}\\n\u0026quot; -o /dev/null https://example.com 输出请求的总时间。\n限制请求时间： curl --max-time 10 https://example.com 设置请求的最大时间为10秒。\n断点续传： curl -C - -O https://example.com/file.jpg 从上次下载的位置继续下载文件。\n使用HTTP代理： curl --proxy http://proxy.example.com:8080 https://example.com 使用HTTP代理访问URL。\n忽略证书验证： curl -k https://example.com 忽略SSL证书验证。\n验证用户身份： curl --user username:password https://example.com 使用用户名和密码进行身份验证。\n发送JSON数据： curl -X POST -H \u0026quot;Content-Type: application/json\u0026quot; -d '{\u0026quot;key\u0026quot;: \u0026quot;value\u0026quot;}' https://example.com 发送JSON格式的数据。\n并发请求： curl http://{1..10}.example.com 并发发送10个请求。\n保存响应到文件： curl -o response.txt https://example.com 将响应保存到文件response.txt。\n请注意，上述示例中的URL仅为示意，您需要将其替换为实际的目标URL。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"dnf的使用方法 DNF（Dandified Yum）是CentOS中用于包管理的工具，可以方便地安装、更新和删除软件包。下面是DNF的常用使用方法：\n安装软件包：使用以下命令安装软件包（例如安装vim）：\n1 dnf install vim 更新软件包：使用以下命令更新已安装的软件包：\n1 dnf update 删除软件包：使用以下命令删除已安装的软件包（例如删除vim）：\n1 dnf remove vim 搜索软件包：使用以下命令搜索可用的软件包（例如搜索vim）：\n1 dnf search vim 列出已安装的软件包：使用以下命令列出已安装的软件包：\n1 dnf list installed 列出可用的软件包：使用以下命令列出可用的软件包：\n1 dnf list available 列出已升级的软件包：使用以下命令列出已升级的软件包：\n1 dnf list updates 清理缓存：使用以下命令清理DNF缓存：\n1 dnf clean all 显示软件包的详细信息：使用以下命令显示软件包的详细信息（例如显示vim软件包的信息）：\n1 dnf info vim 同步软件包存储库：使用以下命令同步软件包存储库：\n1 dnf makecache 列出软件包的依赖关系：使用以下命令列出软件包的依赖关系（例如列出vim软件包的依赖关系）：\n1 dnf repoquery --requires vim 列出软件包被哪些其他软件包依赖：使用以下命令列出软件包被哪些其他软件包依赖（例如列出vim软件包被哪些其他软件包依赖）：\n1 dnf repoquery --whatrequires vim 列出软件包的文件提供者：使用以下命令列出软件包提供的文件（例如列出vim软件包提供的文件）：\n1 dnf repoquery --provides vim 列出软件包依赖的其他软件包：使用以下命令列出软件包依赖的其他软件包（例如列出vim软件包依赖的其他软件包）：\n1 dnf repoquery --depends vim 列出软件包的changelog：使用以下命令列出软件包的changelog信息（例如列出vim软件包的changelog信息）：\n1 dnf changelog vim 安装指定版本的软件包：使用以下命令安装指定版本的软件包（例如安装vim的2.0版本）：\n1 dnf install vim-2.0 禁用软件包的自动依赖解决：使用以下命令禁用软件包的自动依赖解决：\n1 dnf install --setopt=tsflags=nodocs package_name 列出软件包的源信息：使用以下命令列出软件包的源信息（例如列出vim软件包的源信息）：\n1 dnf repoquery --source vim 列出软件包的推荐安装列表：使用以下命令列出软件包的推荐安装列表（例如列出vim软件包的推荐安装列表）：\n1 dnf repoquery --recommendations vim 禁用软件包的自动更新：使用以下命令禁用软件包的自动更新：\n1 dnf config-manager --set-disabled package_name 这些是DNF的常用使用方法，可以较方便地进行包管理和操作。注意在执行某些命令时，可能需要以root用户身份运行或使用sudo命令。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"find的使用方法 find命令用于在指定目录下搜索文件，可以通过多种选项和参数来满足不同的搜索需求。\nfind的常用使用方法包括：\n查找文件名：find /path/to/directory -name \u0026quot;filename\u0026quot; 例如：find /home -name \u0026quot;test.txt\u0026quot;，在/home目录下查找名为test.txt的文件。\n查找文件类型：find /path/to/directory -type f 例如：find /var/log -type f，在/var/log目录下查找所有普通文件。\n查找目录：find /path/to/directory -type d 例如：find /usr -type d，在/usr目录下查找所有目录。\n根据文件大小查找：find /path/to/directory -size [+/-]size_unit 例如：find /var -size +1M，在/var目录下查找大小超过1MB的文件。\n根据文件权限查找：find /path/to/directory -perm mode 例如：find /etc -perm 644，在/etc目录下查找文件权限为644的文件。\n根据文件所有者查找：find /path/to/directory -user username 例如：find /home -user root，在/home目录下查找所有属于root用户的文件。\n根据文件所属组查找：find /path/to/directory -group groupname 例如：find /var/log -group syslog，在/var/log目录下查找所有属于syslog组的文件。\n查找最近修改过的文件：find /path/to/directory -mtime days 例如：find /tmp -mtime -7，在/tmp目录下查找7天内修改过的文件。\n查找空文件或空目录：find /path/to/directory -empty 例如：find /home -empty，在/home目录下查找为空的文件或目录。\n查找符号链接文件：find /path/to/directory -type l 例如：find /usr/local -type l，在/usr/local目录下查找所有符号链接文件。\n同时满足多个条件的查找：find /path/to/directory -name \u0026quot;filename\u0026quot; -type f -user username 例如：find /home -name \u0026quot;*.txt\u0026quot; -type f -user root，在/home目录下查找文件名以.txt结尾、属于root用户的文件。\n排除指定目录的查找：find /path/to/directory -not -path \u0026quot;/path/to/exclude\u0026quot; 例如：find /var -not -path \u0026quot;/var/log\u0026quot;，在/var目录下查找，但排除/var/log目录。\n按照文件修改时间排序结果：find /path/to/directory -type f -printf \u0026quot;%TY-%Tm-%Td %TH:%TM %p\\n\u0026quot; | sort 例如：find /home -type f -printf \u0026quot;%TY-%Tm-%Td %TH:%TM %p\\n\u0026quot; | sort，在/home目录下查找文件，并按照修改时间排序。\n将查找结果输出到文件：find /path/to/directory -name \u0026quot;filename\u0026quot; \u0026gt; output.txt 例如：find /home -name \u0026quot;*.txt\u0026quot; \u0026gt; filelist.txt，在/home目录下查找所有以.txt结尾的文件，并将结果保存到filelist.txt文件中。\n在查找过程中执行其他命令：find /path/to/directory -name \u0026quot;filename\u0026quot; -exec command {} \\; 例如：find /home -name \u0026quot;*.txt\u0026quot; -exec cp {} /tmp \\;，在/home目录下查找所有以.txt结尾的文件，并将它们复制到/tmp目录中。\n这只是find命令的一些常用使用方法，它还有更多选项和参数可以满足不同的搜索需求。可以通过man find命令查看详细的使用说明。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"firewalld的使用方法 Firewalld是CentOS中默认的防火墙管理工具，它提供了一种简单而灵活的方式来管理系统的防火墙规则。\n查看防火墙状态：sudo systemctl status firewalld。 启动防火墙：sudo systemctl start firewalld。 停止防火墙：sudo systemctl stop firewalld。 重启防火墙：sudo systemctl restart firewalld。 设置防火墙开机自启：sudo systemctl enable firewalld。 关闭防火墙开机自启：sudo systemctl disable firewalld。 添加规则： 7. 添加一个允许的端口：sudo firewall-cmd --add-port=80/tcp --permanent（80为端口号）。 8. 删除已添加的端口：sudo firewall-cmd --remove-port=80/tcp --permanent。 9. 添加一个允许的服务：sudo firewall-cmd --add-service=http --permanent（http为服务名）。 10. 删除已添加的服务：sudo firewall-cmd --remove-service=http --permanent。 11. 添加一个允许的IP地址：sudo firewall-cmd --add-source=192.168.1.100 --permanent。 12. 删除已添加的IP地址：sudo firewall-cmd --remove-source=192.168.1.100 --permanent。\n查看规则： 13. 查看当前生效的规则：sudo firewall-cmd --list-all。 14. 查看已打开的端口列表：sudo firewall-cmd --list-ports。 15. 查看已开放的服务列表：sudo firewall-cmd --list-services。 16. 查看已允许的源IP列表：sudo firewall-cmd --list-sources。\n其他： 17. 临时开启防火墙：sudo systemctl is-active firewalld。 18. 在不重启防火墙的情况下重新加载规则：sudo firewall-cmd --reload。 19. 开放某个接口的所有端口：sudo firewall-cmd --zone=public --add-interface=eth0（eth0为接口名）。 20. 移除某个接口的所有端口：sudo firewall-cmd --zone=public --remove-interface=eth0。\n注：所有命令执行后，需要重启防火墙才能使规则生效：sudo systemctl restart firewalld。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"groupmod的使用方法 groupmod是一个用于修改用户组的命令。它可以用于修改用户组的名称、GID（组ID）以及用户组相关的信息。\n以下是groupmod的一些常用使用方法和示例：\n修改用户组名称：\n1 groupmod -n new_group_name old_group_name 修改用户组的GID：\n1 groupmod -g new_gid group_name 修改用户组的描述信息：\n1 groupmod -o -n new_group_name -g new_gid -c \u0026#34;new_description\u0026#34; group_name 将用户组的GID设置为非重复值：\n1 groupmod -o group_name 修改用户组的主用户名：\n1 groupmod -g new_gid -o -u new_user_name group_name 将用户组的GID设置为与已有用户组不冲突的最小值：\n1 groupmod --non-unique group_name 将用户加入新的用户组：\n1 groupmod -A user_name group_name 从用户组中删除指定用户：\n1 groupmod -R user_name group_name 在用户组中添加用户时，使用某个文件中的用户名列表：\n1 groupmod -A -x /path/to/usernames.txt group_name 将用户组的GID设置为不同于用户的UID：\n1 groupmod -g GID group_name 将用户从旧的用户组迁移到新的用户组：\n1 groupmod -G new_group_name user_name 禁用用户组的登录功能：\n1 groupmod -n --lock group_name 启用禁用的用户组的登录功能：\n1 groupmod -n --unlock group_name 将用户组从主用户组更改为辅助用户组：\n1 groupmod -g GID -o --from primary_group_name auxiliary_group_name 将用户组从辅助用户组更改为主用户组：\n1 groupmod -g GID --to auxiliary_group_name primary_group_name 修改用户组的最大密码时效（在多少天后必须更改密码）：\n1 groupmod -n --maxage max_days group_name 修改用户组的最小密码时效（密码必须在多少天后才能更改）：\n1 groupmod -n --minage min_days group_name 查看用户组的详细信息（包括GID和成员列表）：\n1 groupmod -n group_name 修改用户组的密码过期期限（在多少天后用户密码过期）：\n1 groupmod -n --expire max_days group_name 获取用户组的密码过期日期：\n1 groupmod -n -l group_name 请注意，上述示例中的命令仅为示意，实际使用时需要根据具体情况调整参数和选项。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"head的使用方法 head命令用于显示文件的开头部分，默认显示文件的前10行。\n常用的使用方法有：\nhead file.txt：显示文件file.txt的前10行内容。 head -n 5 file.txt：显示文件file.txt的前5行内容。 head -c 20 file.txt：显示文件file.txt的前20个字符。 head -q file1.txt file2.txt：同时显示文件file1.txt和file2.txt的前10行内容，并在输出中添加文件名。 head -v file.txt：显示文件file.txt的前10行内容，并在输出中添加文件名。 head -n +20 file.txt：显示文件file.txt从第20行开始到文件末尾的内容。 head -f file.txt：实时显示文件file.txt的前10行内容，并在文件末尾追加的内容自动刷新。 head -1 file.txt：显示文件file.txt的第一行内容。 head -n -5 file.txt：显示文件file.txt去除最后5行后的内容。 head \u0026ndash;help：显示head命令的帮助信息。 常用的实例有：\nhead /var/log/messages：显示系统日志文件的前10行内容。 head -n 20 /etc/passwd：显示系统用户信息文件的前20行内容。 head -c 100 /var/log/syslog：显示系统日志文件的前100个字节。 head -q /var/log/messages /var/log/syslog：同时显示系统日志文件和系统错误日志文件的前10行内容，并在输出中添加文件名。 head -v /etc/hosts：显示/etc/hosts文件的前10行内容，并在输出中添加文件名。 head -n +50 /var/log/auth.log：显示系统认证日志文件从第50行开始到文件末尾的内容。 tail -f /var/log/messages | head：实时显示系统日志文件的最新10行内容。 head -1 /etc/passwd：显示系统用户信息文件的第一行内容。 head -n -5 /var/log/syslog：显示系统日志文件去除最后5行后的内容。 以上是head命令的常用使用方法和实例，可以根据实际需求来选择相应的选项和参数。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"htop的使用方法 htop是一个Linux系统的交互式进程查看工具，可以替代传统的top命令。以下是htop的常用使用方法和实例：\n查看进程列表：启动htop后，可以直接看到系统上所有的进程列表。 实时监控进程：htop能够以实时更新的方式显示系统中进程的信息，包括CPU使用率、内存使用量、进程状态等。 排序进程：可以按照CPU使用率、内存使用量、进程ID等字段对进程进行排序，并实时显示排序结果。 杀死进程：选中某个进程后，可以使用F9键杀死该进程。 刷新页面：按下F5键可以刷新页面，更新进程列表和显示信息。 查找进程：按下F3键可以进入查找模式，输入进程名或进程ID来查找相关进程。 设置进程显示：按下F2键可以进入设置面板，可以选择显示哪些列的信息，以及设置显示颜色等。 显示进程树：按下F4键可以显示进程树，可以清晰地看到进程之间的父子关系。 监控CPU使用率：在设置面板中选择\u0026quot;Setup meters\u0026quot;，可以设置显示各个CPU核心的使用率。 监控内存使用量：在设置面板中选择\u0026quot;Setup meters\u0026quot;，可以设置显示内存使用量及交换分区的使用情况。 监控网络流量：在设置面板中选择\u0026quot;Setup meters\u0026quot;，可以设置显示网络接口的入口流量和出口流量。 显示进程命令行参数：按下F2键进入设置面板，设置显示宽度，将Command列的宽度增大，可以完整显示命令行参数。 显示进程环境变量：按下F2键进入设置面板，设置显示宽度，将Environ列的宽度增大，可以显示进程的环境变量。 显示进程打开的文件：选中一个进程，按下F2键进入设置面板，在File列选择\u0026quot;Opened files\u0026quot;，可以显示进程打开的文件列表。 显示进程的线程：选中一个进程，按下F2键进入设置面板，在Thread列选择\u0026quot;Thread list\u0026quot;，可以显示进程的所有线程。 设置进程过滤器：按下F3键进入查找模式，按下F4键进入过滤模式，可以设置过滤器来显示特定条件下的进程。 显示进程的详细信息：选中一个进程，按下F1键可以显示进程的详细信息，包括进程启动时间、线程信息、进程状态等。 监控系统负载：在设置面板中选择\u0026quot;Setup screens\u0026quot;，可以设置显示系统负载的面板。 监控磁盘IO使用量：在设置面板中选择\u0026quot;Setup screens\u0026quot;，可以设置显示各个磁盘分区的IO使用情况。 显示进程的信号：选中一个进程，按下F9键可以发送信号给该进程。 在CentOS系统中安装htop的方法：\n1 sudo yum install htop ","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ifconfig的使用方法 ifconfig是一个在Linux系统中用于配置和显示网络接口信息的命令行工具。它可以用来查看和修改网卡的IP地址、子网掩码、广播地址、MAC地址等。\n常用使用方法如下：\n查看当前所有网络接口的信息：ifconfig 查看指定网卡的信息：ifconfig eth0 启用指定网卡：ifconfig eth0 up 停用指定网卡：ifconfig eth0 down 分配静态IP地址：ifconfig eth0 192.168.1.100 分配子网掩码：ifconfig eth0 netmask 255.255.255.0 设置MAC地址：ifconfig eth0 hw ether 00:11:22:33:44:55 激活网卡的广播：ifconfig eth0 broadcast 192.168.1.255 配置MTU值：ifconfig eth0 mtu 1500 启用网络广播包过滤：ifconfig eth0 promisc 禁用网络广播包过滤：ifconfig eth0 -promisc 显示已经接收和发送的字节数据：ifconfig eth0 | grep \u0026lsquo;RX packets|TX packets\u0026rsquo; 查看网卡的链接状态：ifconfig eth0 | grep \u0026lsquo;Link\u0026rsquo; 设置网卡的多播地址：ifconfig eth0 multicast 获取网卡信息并将结果重定向到文件：ifconfig eth0 \u0026gt; output.txt 清除网卡配置：ifconfig eth0 0.0.0.0 重启网卡：ifconfig eth0 restart 配置IPv6地址：ifconfig eth0 inet6 add 2001:db8::1/64 显示所有循环接口的信息：ifconfig -a 查看帮助信息：ifconfig \u0026ndash;help 安装方法：在CentOS中，ifconfig工具默认已经安装好，无需单独安装。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ifdown的使用方法 ifdown命令用于关闭网络接口。以下是ifdown命令的常用使用方法：\n基本语法：ifdown [接口名]，例如：ifdown eth0 这个命令会关闭指定的网络接口。\n关闭所有网络接口：ifdown -a 该命令会关闭所有当前激活的网络接口，但不会禁用配置文件中定义的接口。\n禁用网络接口：ifdown \u0026ndash;exclude=[接口名] 这个命令会关闭除指定网络接口外的所有网络接口。\n禁止自动启用网络接口：ifdown \u0026ndash;no-auto[接口名] 这个命令将禁止在系统引导时自动启用指定的网络接口。\n使用正则表达式关闭多个接口：ifdown \u0026ndash;regex=[正则表达式] 这个命令可以使用正则表达式来关闭匹配的多个网络接口。\n显示ifdown的帮助页面：ifdown \u0026ndash;help 这个命令会显示ifdown命令的详细帮助信息，包括所有可用选项和参数的说明。\n强制关闭网络接口：ifdown \u0026ndash;force [接口名] 这个命令会强制关闭指定的网络接口，即使有正在进行中的网络连接。\n指定配置文件路径：ifdown \u0026ndash;config=[配置文件路径] [接口名] 这个命令可以使用自定义的配置文件来关闭指定的网络接口。\n模拟关闭操作：ifdown \u0026ndash;dry-run [接口名] 这个命令会模拟关闭指定的网络接口，显示将执行的操作，但不会实际关闭接口。\n将网络接口从网络桥接设备中分离：ifdown [接口名] bridge [桥接设备] 这个命令用于将指定的网络接口从指定的网络桥接设备中分离。\n重置网络接口配置：ifdown \u0026ndash;reset [接口名] 这个命令会将指定网络接口的配置重置为默认值。\n关闭并重启网络接口：ifdown [接口名] \u0026amp;\u0026amp; ifup [接口名] 这个命令会关闭指定的网络接口，然后立即重新启用该接口。\n请注意，ifdown命令需要root权限才能执行。在CentOS中，默认安装了ifdown工具，因此不需要额外进行安装。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"kill的使用方法\nkill是一个常用的命令行工具，用于终止运行中的进程。它可以通过进程 ID (PID) 或进程名称来识别和终止进程。\n在 CentOS 中，kill工具通常默认安装在系统中，无需额外安装。\n下面是kill的常用使用方法：\n终止指定进程：\n1 kill PID 其中，PID是要终止的进程的进程 ID。\n终止多个进程：\n1 kill PID1 PID2 PID3 可以一次性终止多个进程。\n终止指定进程及其所有子进程：\n1 kill -TERM PID -TERM 是一个信号名称，表示正常终止进程。加上该选项，会终止指定进程及其所有子进程。\n终止多个进程及其所有子进程：\n1 kill -TERM PID1 PID2 PID3 同样，可以一次性终止多个进程及其所有子进程。\n终止指定进程并强制终止：\n1 kill -KILL PID -KILL 是一个信号名称，表示强制终止进程。加上该选项，会立即终止指定进程，不管进程是否能够正常退出。\n终止指定进程并显示终止消息：\n1 kill -INT PID -INT 是一个信号名称，表示终止进程并显示终止消息。\n列出当前系统中的所有信号名称：\n1 kill -l -l 选项可以列出当前系统支持的所有信号名称，以及信号对应的编号。\n终止指定名称的进程：\n1 killall process_name 其中，process_name 是要终止的进程的名称。killall会终止系统中所有具有相同名称的进程。\n终止指定名称的进程并显示终止消息：\n1 killall -INT process_name -INT 是一个信号名称，表示终止进程并显示终止消息。\n终止指定用户的所有进程：\n1 pkill -u username 其中，username 是要终止其所有进程的用户的用户名。\n终止指定用户的指定进程：\n1 pkill -u username process_name 终止指定用户的具有指定名称的进程。\n终止指定名称的进程并记录到日志文件：\n1 pkill -x -o -SIGTERM process_name \u0026gt;\u0026gt; /path/to/logfile -x 是一个选项，表示匹配整个进程命令行而不仅仅是进程名称。 -o 是一个选项，表示只终止最早启动的进程。 -SIGTERM 是一个信号名称，表示正常终止进程。\n/path/to/logfile 表示将终止信息追加到指定的日志文件。\n终止指定命令的所有进程：\n1 pkill -f command 终止所有包含指定命令的进程。\n终止指定命令的指定进程：\n1 pkill -f -o -SIGTERM command 终止包含指定命令的最早启动的进程。\n终止指定进程组：\n1 pkill -g pgid 其中，pgid 是要终止的进程组的进程组 ID。\n终止指定会话的所有进程：\n1 pkill -s sid 其中，sid 是要终止的会话的会话 ID。\n终止指定通信组的进程：\n1 pkill -G gid 其中，gid 是要终止的通信组的组 ID。\n向指定进程发送指定信号：\n1 kill -s signal_name PID 可以通过 -s 选项指定信号名称，向指定进程发送指定信号。\n向指定进程发送信号0：\n1 kill -0 PID -0 选项表示不真正终止进程，只是检查进程是否存在。\n向指定进程发送指定信号并保存终止码：\n1 2 kill -signal_number PID echo $? -signal_number 选项表示向指定进程发送指定信号，并将终止码保存到 $? 变量中。\n这些是kill工具的常用使用方法和实例。可以根据需要选择合适的方法来终止进程。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"mount的使用方法 mount是一个用于挂载文件系统的命令行工具。常用的用法有以下几种：\n挂载文件系统：mount DEVICE DIRECTORY 例如：mount /dev/sda1 /mnt 这条命令将/dev/sda1分区挂载到/mnt目录上。\n挂载网络文件系统：mount -t TYPE -o OPTIONS SOURCE DIRECTORY 例如：mount -t nfs -o nolock 192.168.0.100:/path /mnt 这条命令将192.168.0.100主机上的/path目录挂载到/mnt目录上，使用NFS协议，禁用文件锁定。\n查看已挂载的文件系统：mount 这条命令将列出当前已挂载文件系统的详细信息。\n卸载文件系统：umount DEVICE/DIRECTORY 例如：umount /dev/sda1 这条命令将卸载/dev/sda1分区。\n强制卸载文件系统：umount -f DEVICE/DIRECTORY 例如：umount -f /mnt 这条命令将强制卸载/mnt目录上的文件系统，即使它仍然被使用。\n挂载只读文件系统：mount -o ro DEVICE DIRECTORY 例如：mount -o ro /dev/sda1 /mnt 这条命令将以只读模式挂载/dev/sda1分区到/mnt目录上。\n挂载可读写文件系统：mount -o rw DEVICE DIRECTORY 例如：mount -o rw /dev/sda1 /mnt 这条命令将以可读写模式挂载/dev/sda1分区到/mnt目录上。\n自动挂载文件系统：将文件系统添加到/etc/fstab配置文件中，系统启动时会自动挂载。 例如：在/etc/fstab中添加一行：/dev/sda1 /mnt ext4 defaults 0 0 这样在系统启动时会自动挂载/dev/sda1分区到/mnt目录上，使用ext4文件系统。\n指定文件系统类型：mount -t TYPE DEVICE DIRECTORY 例如：mount -t ext4 /dev/sda1 /mnt 这条命令将以ext4文件系统类型挂载/dev/sda1分区到/mnt目录上。\n挂载镜像文件：mount -o loop IMAGE_FILE DIRECTORY 例如：mount -o loop /path/to/image.img /mnt 这条命令将将镜像文件/path/to/image.img挂载到/mnt目录上。\n这些只是mount命令的一些常见用法，具体的使用方法还可以通过\u0026quot;man mount\u0026quot;命令查看更多详细信息。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"mv的使用方法 mv是Linux系统中的一个命令，用于移动或重命名文件和目录。它的基本使用方法如下：\n移动文件或目录：mv source_file destination 例如：mv file.txt /home/user/ 将file.txt文件移动到/home/user/目录下。\n重命名文件或目录：mv old_name new_name 例如：mv file.txt new_file.txt 将file.txt文件重命名为new_file.txt。\n强制移动或重命名：mv -f source destination 例如：mv -f file.txt /home/user/ 强制将file.txt文件移动到/home/user/目录下，并覆盖同名文件。\n移动多个文件：mv file1 file2 file3 directory 例如：mv file1 file2 file3 /home/user/ 将file1、file2和file3三个文件移动到/home/user/目录下。\n移动所有文件：mv * directory 例如：mv * /home/user/ 将当前目录下的所有文件移动到/home/user/目录下。\n移动目录及其内容：mv directory1 directory2 例如：mv dir1 /home/user/ 将dir1目录移动到/home/user/目录下，保持目录结构不变。\n将文件移动到上一级目录：mv file ../ 例如：mv file.txt ../ 将file.txt文件移动到当前目录的上一级目录。\n移动文件时保留前导路径：mv --parents source_file destination 例如：mv --parents dir1/dir2/file.txt /home/user/ 将file.txt文件移动到/home/user/目录下，并保留dir1/dir2的前导路径。\n移动文件并给目标文件指定权限：mv -p source_file destination 例如：mv -p file.txt /home/user/ 将file.txt文件移动到/home/user/目录下，并保留原文件的权限。\n显示移动的过程信息：mv -v source_file destination 例如：mv -v file.txt /home/user/ 显示将file.txt文件移动到/home/user/目录下的过程信息。\n将符号链接本身移动到目标位置：mv -T source destination 例如：mv -T link /home/user/new_link 将link符号链接本身移动到/home/user/new_link。\n移动文件时询问是否覆盖：mv -i source_file destination 例如：mv -i file.txt /home/user/ 在移动file.txt文件到/home/user/目录下之前询问是否覆盖同名文件。\n移动时忽略隐藏文件：mv !(-.*) destination 例如：mv !(-.*) /home/user/ 移动当前目录下的所有非隐藏文件到/home/user/目录下。\n交互式移动文件：mv -u source_file destination 例如：mv -u file.txt /home/user/ 移动file.txt文件到/home/user/目录下，如果目标位置已存在同名文件但更新时间比源文件旧则覆盖。\n移动目录并保留目录的访问时间：mv -u --preserve=ctime source_dir destination 例如：mv -u --preserve=ctime dir1 /home/user/ 移动dir1目录到/home/user/目录下，并保留目录的访问时间不变。\n这些是mv命令的常用使用方法，通过它可以方便地在Linux系统中移动和重命名文件和目录。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"nano的使用方法 Nano是一个简单易用的文本编辑器，常用于在终端中编辑文本文件。\n常用使用方法：\n打开文件：在终端中输入nano 文件路径来打开指定文件。例如：nano /path/to/file.txt 保存文件：按Ctrl + O组合键，然后按Enter键保存修改。 退出编辑器：按Ctrl + X组合键，然后按Y键确认退出。 移动光标：使用方向键移动光标位置。也可以使用Ctrl + F（向右移动一个字符）、Ctrl + B（向左移动一个字符）、Ctrl + P（向上移动一行）、Ctrl + N（向下移动一行）等快捷键进行移动。 复制、剪切和粘贴：使用Ctrl + K剪切一行或选定的文本，Ctrl + U粘贴剪切板中的文本，Ctrl + L复制一行或选定的文本。 搜索和替换：按Ctrl + W组合键进入搜索模式，输入关键词进行搜索，按Ctrl + \\组合键进入替换模式进行替换操作。 撤销和重做：按Ctrl + G组合键显示帮助菜单，其中包含了撤销和重做的操作键。 编辑多个文件：在启动nano编辑器时指定多个文件路径作为参数，可以同时编辑多个文件。例如：nano file1.txt file2.txt 显示行号：使用Ctrl + C组合键开启或关闭行号显示。 块缩进：使用Ctrl + ]组合键向右缩进选定的文本块，Ctrl + [组合键向左缩进。 快速跳转：使用Ctrl + _组合键可以跳到指定行号。 常用实例：\n编辑一个新的文本文件：nano newfile.txt 打开一个已存在的文本文件：nano existingfile.txt 在文件中查找指定关键词：按Ctrl + W组合键，输入关键词，按Enter键开始搜索。 替换文件中的文本内容：按Ctrl + \\组合键，输入要替换的文本和替换后的内容，然后按Enter键替换。 复制和粘贴文本：按Ctrl + K剪切一行或选定的文本，然后按Ctrl + U粘贴到光标位置。 移动光标到文件的第10行：按Ctrl + C打开行号显示，然后输入G跳到最后一行，再按10跳到第10行。 撤销和重做操作：按Ctrl + G打开帮助菜单，按U执行撤销操作，按E执行重做操作。 编辑多个文件：nano file1.txt file2.txt同时打开并编辑file1.txt和file2.txt。 这些是一些常用的使用方法和实例，希望能帮到你。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"nc的使用方法 nc (netcat) 是一个网络工具，常用于TCP/IP网络中的数据传输和端口扫描。它提供了许多功能，以下是nc的常用使用方法和实例：\n基本用法：\n在指定端口上监听连接：nc -l \u0026lt;port\u0026gt; 连接到指定主机和端口：nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 在连接建立后启动交互式会话：nc -lvp \u0026lt;port\u0026gt; 文件传输相关：\n发送文件：nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; \u0026lt; file 接收文件：nc -l \u0026lt;port\u0026gt; \u0026gt; file 传输文件到另一个主机：nc -l \u0026lt;port\u0026gt; | nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 端口扫描相关：\n扫描单个端口：nc -z \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 扫描一段端口范围：nc -zv \u0026lt;host\u0026gt; \u0026lt;start-port\u0026gt;-\u0026lt;end-port\u0026gt; 扫描某个主机的所有常用端口：nc -zv \u0026lt;host\u0026gt; 1-1024 网络调试和测试：\n监听UDP连接：nc -lu \u0026lt;port\u0026gt; 通过TCP发送数据：echo -n \u0026quot;data\u0026quot; | nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 通过UDP发送数据：echo -n \u0026quot;data\u0026quot; | nc -u \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 其他常用命令：\n执行远程命令并返回结果：echo -n \u0026quot;command\u0026quot; | nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 远程登录到主机：nc \u0026lt;host\u0026gt; \u0026lt;port\u0026gt; 安装方法（基于CentOS）： 可以使用以下命令安装nc工具：\n1 yum install nc 注意：nc工具在网络安全领域中也被广泛用于网络攻击和渗透测试，因此使用时需要遵守法律法规，不得进行非法活动。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ncdu的使用方法 ncdu是一款用于查看磁盘空间使用情况的工具。它可以显示出文件和目录所占用的空间大小，并且可以帮助用户快速找到磁盘上占用空间较大的文件或目录。\n使用方法如下：\n在CentOS中安装ncdu：在终端中运行命令 sudo yum install ncdu 进行安装。 常用实例：\n进入指定目录并运行ncdu命令：在终端中使用 cd 命令进入要查看的目录，然后运行 ncdu 命令即可。\n查看整个磁盘的空间使用情况：在终端中使用 ncdu / 命令来查看整个磁盘的空间使用情况。\n排序并只显示最大的几个文件或目录：在终端中使用 ncdu -x 命令可以显示每个目录的总大小，并按大小排序。使用 ncdu -x -q -n 10 命令可以只显示最大的10个文件或目录。\n以图形界面显示空间使用情况：在终端中使用 ncdu --color=dark -rr -x 命令可以以图形界面的方式显示空间使用情况。\n忽略指定的目录或文件：在终端中使用 ncdu --exclude \u0026lt;dir/file\u0026gt; 命令可以忽略指定的目录或文件。例如： ncdu --exclude /tmp 将会忽略/tmp目录的空间使用情况。\n导出报告到文件：在终端中使用 ncdu -o \u0026lt;output_file\u0026gt; 命令可以将空间使用情况导出到指定的文件中。例如： ncdu -o report.txt 将会将空间使用情况导出到report.txt文件中。\n查看特定目录或文件的空间使用情况：在终端中使用 ncdu \u0026lt;directory/file\u0026gt; 命令可以查看特定目录或文件的空间使用情况。\n显示空间使用情况的百分比：在终端中使用 ncdu -P 命令可以显示空间使用情况的百分比。\n运行ncdu后使用键盘操作导航：在ncdu界面中可以使用上下方向键来移动光标，使用左右方向键来展开或折叠目录，使用Enter键进入目录，使用Backspace键返回上级目录，使用q键退出ncdu。\n指定特定的目录树的深度：在终端中使用 ncdu --depth \u0026lt;depth\u0026gt; 命令可以指定要显示的目录树的深度。例如： ncdu --depth 2 将会只显示两级目录。\n以上是部分常用的ncdu的使用方法和实例，希望对您有帮助。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"nethogs的使用方法 nethogs是一个Linux下用于监视每个进程的网络流量的工具。安装nethogs很简单，只需在CentOS中运行以下命令：\n1 sudo yum install nethogs 安装完成后，以下是nethogs的常用使用方法：\n启动nethogs：在终端中输入以下命令即可启动nethogs：\n1 sudo nethogs 监视指定网络接口：可以通过在启动nethogs时添加接口名称来指定要监视的网络接口，例如：\n1 sudo nethogs eth0 显示流量数据：nethogs默认以实时模式显示网络流量。它会显示每个进程的发送和接收数据量，并按照流量从高到低进行排序。\n打开文件的监视：nethogs支持监视正在进行的文件传输，可以通过在启动nethogs时添加文件名来指定要监视的文件，例如：\n1 sudo nethogs /path/to/file 显示DNS域名：nethogs默认只显示进程ID，但可以通过按\u0026rsquo; M \u0026lsquo;键来切换到显示进程的DNS域名。\n按进程ID过滤：可以通过在启动nethogs时添加进程ID来只显示特定进程的网络流量，例如：\n1 sudo nethogs -p 1234 排除本地流量：默认情况下，nethogs监视所有流量，包括本地回环流量。可以通过在启动nethogs时添加\u0026rsquo;-v\u0026rsquo;参数来排除本地流量，例如：\n1 sudo nethogs -v 0 指定刷新时间间隔：默认情况下，nethogs的刷新间隔为1秒。可以通过在启动nethogs时添加\u0026rsquo;-d\u0026rsquo;参数来指定刷新的时间间隔（单位为秒），例如：\n1 sudo nethogs -d 5 帮助信息：可以通过在终端中输入以下命令来查看nethogs的帮助信息：\n1 sudo nethogs -h 退出nethogs：在nethogs运行期间，按下\u0026rsquo;q\u0026rsquo;键即可退出。\n这些是nethogs的一些常用使用方法，可以帮助你监视和分析网络流量。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ping的使用方法\n基本的ping命令使用方法：在命令行窗口中输入\u0026quot;ping \u0026lt;目标IP地址或域名\u0026gt;\u0026quot;，例如\u0026quot;ping 192.168.0.1\u0026quot;或\u0026quot;ping www.google.com\u0026quot;。 使用ping来检查网络连接是否正常：通过ping目标IP地址或域名，如果成功返回回复，表示网络连接正常；如果返回请求超时或无法到达目标主机，则表示网络有问题。 使用ping来测试网络延迟：可以使用ping命令来测试从本地主机到目标主机的往返时间（Round-Trip Time，简称RTT），通过观察RTT的时间来评估网络延迟情况。 使用ping来追踪数据包经过的路由：通过在ping命令中添加\u0026quot;-t\u0026quot;选项，可以持续追踪数据包经过的路由路径，以及每个路由节点的响应时间。 使用ping来指定数据包的大小和数量：可以使用\u0026quot;-l\u0026quot;选项来指定发送的数据包大小，和\u0026quot;-n\u0026quot;选项来指定发送的数据包数量。 使用ping来测试TCP/IP端口的可达性：可以使用\u0026quot;-p\u0026quot;选项来指定测试的端口号，例如\u0026quot;ping -p 80 www.google.com\u0026quot;，表示测试与目标主机的80端口是否可达。 使用ping来监测服务器的稳定性：可以使用ping命令配合其他工具（如脚本）来实现周期性地对服务器进行ping测试，并根据测试结果触发相应的操作或报警。 使用ping来排查网络问题：当网络出现问题时，可以使用ping命令依次ping网络上的各个节点，以确定网络中出现问题的节点，从而进行相应的故障排查和修复。 使用ping来测试多个目标主机的可达性：可以使用ping命令在一个命令中同时指定多个目标主机，例如\u0026quot;ping -a www.google.com www.facebook.com\u0026quot;，可以测试多个网站的可达性。 使用ping来测试网络的稳定性和吞吐量：可以使用ping命令连续发送大量的数据包（使用\u0026quot;-f\u0026quot;选项），来测试网络的稳定性和吞吐量，观察丢包率和延迟情况。 使用ping来测试本地网络设备的连通性：可以使用ping命令向本地网络设备（如路由器、交换机等）发送ping请求，以测试本地网络设备的连通性和响应速度。 使用ping来测试指定网络接口的连通性：可以使用\u0026quot;-S\u0026quot;选项来指定发送ping请求的源IP地址，以测试指定网络接口的连通性。 使用ping来测试指定网络接口的带宽：可以使用\u0026quot;-b\u0026quot;选项来指定ping请求的带宽大小（带宽越大，发送请求的速度越快），从而测试指定网络接口的带宽。 使用ping来测试不同网络类型的连通性：可以使用ping命令在不同的网络类型（如IPv4和IPv6）之间进行互通性测试，以确保网络的互通性。 使用ping来测试UDP和ICMP数据包的传输情况：可以使用\u0026quot;-u\u0026quot;选项来发送UDP数据包，以测试UDP数据包的传输情况；使用\u0026quot;-i\u0026quot;选项来发送ICMP数据包，以测试ICMP数据包的传输情况。 使用ping来测试网络服务的可用性：可以使用ping命令测试指定网络服务的可用性，例如\u0026quot;ping smtp.gmail.com\u0026quot;来测试Gmail的SMTP服务是否正常。 使用ping来测试网络的负载均衡：可以使用ping命令在多个负载均衡设备（如负载均衡器、集群等）之间进行互通性测试，以确保负载均衡的正常工作。 使用ping来进行网络性能测试：可以使用ping命令在不同的时间段发送ping请求，观察响应时间和丢包率的变化，以评估网络的性能情况。 使用ping来测试网络防火墙的配置：可以使用ping命令尝试ping目标主机，以测试防火墙对ping请求的处理情况，从而检查防火墙的配置是否正确。 使用ping来进行网络监测和故障排除：可以使用ping命令结合其他网络监测工具（如Wireshark、Nmap等）来对网络进行监测和故障排除。 ","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ps的使用方法 ps命令用于查看当前系统中正在运行的进程。下面是ps命令的常用使用方法：\n查看所有进程：ps aux\n查看指定用户的进程：ps -u username\n查看指定进程的详细信息：ps -p pid\n以树形结构显示进程：ps f\n只显示当前终端运行的进程：ps -t tty\n查看进程及其子进程：ps -eLf\n查看进程的CPU使用情况：ps -eo pid,ppid,cmd,%cpu \u0026ndash;sort=-%cpu\n查看进程的内存使用情况：ps -eo pid,ppid,cmd,%mem \u0026ndash;sort=-%mem\n查看进程的线程数：ps -T pid\n实时监控进程的CPU使用情况：ps -p pid -o %cpu\n实时监控进程的内存使用情况：ps -p pid -o %mem\n查看进程的启动时间：ps -eo pid,lstart,cmd\n查看进程的状态：ps -eo pid,stat,cmd\n查看进程的打开文件数：ps -o pid,comm,nlwp,nfiles\n查看进程的网络连接情况：ps -p pid -o pid,comm,net\n查看进程的文件描述符信息：ps -p pid -o pid,comm,fds\n查看进程的CPU时间使用情况：ps -eo pid,comm,etime\n查看进程的用户和组信息：ps -eo pid,uid,gid,comm\n查看常驻内存的进程：ps -eo pid,cmd,rss,vsz,args \u0026ndash;sort=-rss | head -n 10\n查看指定进程的父进程ID：ps -o ppid= -p pid\n请注意，上述命令中的pid指的是进程的ID，username指的是用户名，tty指的是终端设备。根据需要替换对应的值来使用这些命令。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"rm的使用方法 rm是Linux和Unix系统中常用的命令之一，用于删除文件和目录。\n使用方法：\n删除文件：rm 文件名 示例：rm text.txt 将删除名为text.txt的文件。\n删除目录：rm -r 目录名 示例：rm -r folder 将删除名为folder的目录及其内部所有文件和子目录。\n删除多个文件或目录：rm 文件1 文件2 目录1 目录2 示例：rm file1.txt file2.txt dir1 dir2 将删除文件file1.txt、file2.txt以及目录dir1和dir2。\n删除文件时不询问确认：rm -f 文件名 示例：rm -f text.txt 将强制删除名为text.txt的文件，而无需确认。\n删除文件时显示删除信息：rm -v 文件名 示例：rm -v text.txt 将删除名为text.txt的文件，并显示删除信息。\n删除目录及内容时不询问确认：rm -rf 目录名 示例：rm -rf folder 将强制删除名为folder的目录及其内部所有文件和子目录，而无需确认。\n删除目录及其内容时显示删除信息：rm -rv 目录名 示例：rm -rv folder 将删除名为folder的目录及其内部所有文件和子目录，并显示删除信息。\n删除当前目录下所有文件和子目录：rm -rf * 示例：rm -rf * 将删除当前目录下的所有文件和子目录。\n删除指定类型的文件：rm *.扩展名 示例：rm *.txt 将删除当前目录下所有扩展名为.txt的文件。\n删除文件并备份到回收站：rm -i 文件名 示例：rm -i text.txt 将删除名为text.txt的文件，并将其备份到回收站，需要确认删除操作。\n删除目录并备份到回收站：rm -ir 目录名 示例：rm -ir folder 将删除名为folder的目录及其内部所有文件和子目录，并将其备份到回收站，需要确认删除操作。\n在删除前显示确认信息：rm -i 文件名 示例：rm -i text.txt 将删除名为text.txt的文件，删除前会询问确认。\n这些是rm命令的常用使用方法，通过这些方法，你可以有效地删除文件和目录。请注意，使用rm命令要格外小心，因为删除操作是不可逆的，所以在使用该命令时务必慎重。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"route的使用方法 route是Linux中常用的网络路由工具，用于管理和操作系统内核中的IP路由表。\n常用的route命令选项包括：\nadd：添加一个新的路由条目到路由表中。 del：从路由表中删除一个路由条目。 show：显示当前系统的路由表信息。 flush：清空路由表。 常用的实例有：\n添加一个默认网关： 1 route add default gw 192.168.1.1 添加一个目标网络的路由： 1 route add -net 192.168.2.0/24 gw 192.168.1.2 删除一个路由条目： 1 route del default gw 192.168.1.1 显示当前系统的路由表信息： 1 route -n 清空路由表： 1 route flush ","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"screen的使用方法 Screen是一个用于管理多个终端会话的工具，可以使用户在一个终端窗口中同时运行多个终端会话。\n常用使用方法如下：\n启动一个新的Screen会话：在终端中输入screen，按下回车键即可启动一个新的会话。\n在会话中创建新的窗口：按下Ctrl + A，然后按下C键即可在当前会话中创建一个新窗口。\n切换窗口：按下Ctrl + A，然后按下N键或是P键可以在窗口之间进行切换。\n关闭当前窗口：在窗口中输入exit命令或按下Ctrl + D可以关闭当前的窗口。\n分割窗口：按下Ctrl + A，然后按下S键可以将当前窗口水平分割为两个窗口，按下Ctrl + A，然后按下|键可以将当前窗口垂直分割为两个窗口。\n切换分割窗口：按下Ctrl + A，然后按下Tab键可以在分割的窗口之间进行切换。\n调整分割窗口大小：按下Ctrl + A，然后按下Ctrl + 方向键可以调整分割窗口的大小。\n恢复之前的会话：在终端中输入screen -R命令，可以恢复之前断开或意外关闭的会话。\n查看已存在的会话：在终端中输入screen -ls命令，可以查看当前已存在的会话列表。\n连接已存在的会话：在终端中输入screen -r \u0026lt;会话ID\u0026gt;命令，可以连接到已存在的会话。\n在会话中运行后台命令：按下Ctrl + A，然后按下d键即可将当前会话推到后台运行。\n在会话中运行命令时使用日志：在终端中输入screen -L命令，会话中的所有输出都会被记录到日志文件中。\n查看当前会话中的窗口列表：按下Ctrl + A，然后按下\u0026quot;键可以查看当前会话中的窗口列表。\n重命名当前窗口：按下Ctrl + A，然后按下A键，然后输入新的窗口名称，按下回车键即可重命名当前窗口。\n使用Ctrl键进行复制：按下Ctrl + A，然后按下[键进入复制模式，在复制模式下使用方向键进行选择文本，按下回车键复制已选择的文本。\n在会话中发送命令到所有窗口：按下Ctrl + A，然后按下:键，然后输入at \\* command命令，按下回车键即可将命令发送到所有窗口。\n在会话中发送命令到指定窗口：按下Ctrl + A，然后按下:键，然后输入at \u0026lt;窗口ID\u0026gt; command命令，按下回车键即可将命令发送到指定窗口。\n在会话中设置会话名称：按下Ctrl + A，然后按下:键，然后输入sessionname \u0026lt;新会话名称\u0026gt;命令，按下回车键即可设置会话的名称。\n在会话中进行跨窗口发送输入：按下Ctrl + A，然后按下:键，然后输入at \u0026lt;窗口ID\u0026gt; stuff \u0026lt;输入内容\u0026gt;命令，按下回车键即可将输入内容发送到指定窗口。\n在会话中关闭其他窗口：按下Ctrl + A，然后按下:键，然后输入kill命令，按下回车键即可关闭除当前窗口外的其他窗口。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"sed的使用方法 sed是一个在Linux中非常常用的文本处理工具，可以用于对文本文件进行编辑、替换、删除等操作。下面是sed的一些常用使用方法和实例：\n替换文本中的字符串： sed 's/old/new/' file.txt：将文本文件file.txt中的所有old替换为new。\n替换文本中的字符串（只替换第一次出现的）： sed 's/old/new/1' file.txt：只替换文本文件file.txt中第一次出现的old。\n替换文本中的字符串（仅替换匹配到的行）： sed '/pattern/s/old/new/' file.txt：只替换匹配到pattern的行中的old。\n替换文本中的字符串（全局替换）： sed 's/old/new/g' file.txt：将文本文件file.txt中的所有old替换为new。\n删除匹配到的行： sed '/pattern/d' file.txt：删除文本文件file.txt中匹配到pattern的行。\n删除空白行： sed '/^\\s*$/d' file.txt：删除文本文件file.txt中的空白行。\n插入新行： sed '3i\\new line' file.txt：在第三行之前插入一行new line。\n在匹配到的行前插入新行： sed '/pattern/i\\new line' file.txt：在匹配到pattern的行前插入一行new line。\n在匹配到的行后插入新行： sed '/pattern/a\\new line' file.txt：在匹配到pattern的行后插入一行new line。\n打印匹配到的行： sed -n '/pattern/p' file.txt：只打印出匹配到pattern的行。\n打印指定行范围内的行： sed -n '5,10p' file.txt：打印出文件file.txt的第5到第10行。\n打印指定行号的行： sed -n '5p' file.txt：只打印出文件file.txt的第5行。\n使用正则表达式进行匹配： sed -n '/^pattern/p' file.txt：只打印出以pattern开头的行。\n将输出结果保存到新文件中： sed 's/old/new/' file.txt \u0026gt; newfile.txt：将替换结果保存到新文件newfile.txt。\n修改原文件（需要备份）： sed -i.bak 's/old/new/' file.txt：在替换的过程中备份原文件为file.txt.bak。\n忽略大小写： sed 's/old/new/I' file.txt：忽略大小写进行替换。\n执行多个编辑命令： sed -e 's/old/new/' -e 's/pattern/replace/' file.txt：执行多个编辑命令，分别替换文本中的old和pattern。\n只处理文件的部分内容： sed '1,10d' file.txt：删除文件file.txt的第1到第10行。\n指定文件的扩展名： sed -i.bak 's/old/new/' *.txt：在所有扩展名为txt的文件中替换old为new，并备份原文件。\n调用sed脚本文件： sed -f script.sed file.txt：根据script.sed中的脚本，对文件file.txt进行编辑。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"socat的使用方法 socat是一款强大的网络工具，可以在不同的网络连接之间进行双向数据传输或转发。以下是socat的常用使用方法和实例：\n创建一个TCP监听端口：socat TCP-LISTEN:8080\n连接到远程TCP服务器：socat TCP:127.0.0.1:8080\n创建一个UDP监听端口：socat UDP-LISTEN:8080\n连接到远程UDP服务器：socat UDP:127.0.0.1:8080\n使用socat作为简单的网络代理：socat TCP-LISTEN:8080,fork TCP:webserver:80\n在两个远程主机之间建立加密隧道：socat openssl:localhost:8080,verify=0 openssl:remotehost:8080\n监听UNIX域套接字连接：socat UNIX-LISTEN:/tmp/socket.sock\n连接到UNIX域套接字：socat UNIX-CONNECT:/tmp/socket.sock\n将数据从一个文件传输给远程主机：socat FILE:test.txt TCP:localhost:8080\n将数据从一个远程主机传输到一个文件：socat TCP:remotehost:8080 FILE:test.txt\n将终端的输出重定向到socat连接中：echo \u0026ldquo;Hello, World!\u0026rdquo; | socat - TCP:localhost:8080\n将socat连接的输出重定向到终端：socat TCP:remotehost:8080 STDOUT\n在两个UART设备之间建立连接：socat -d -d pty,raw,echo=0 pty,raw,echo=0\n在一个套接字文件和一个串口之间建立连接：socat -d -d UNIX-LISTEN:/tmp/socket.sock,mode=777,bind=7,unlink-early,reuseaddr,fork,group=users,range=192.168.0.0/24 TCP:/dev/ttyS0\n使用socat在终端之间进行简单的聊天：socat READLINE,history=$HOME/.socat_history EXEC:\u0026ldquo;tee -a $HOME/.socat_history\u0026rdquo;,pty,link=$HOME/.socat_pty\n使用socat将输出发送到syslog：(echo \u0026ldquo;Hello, World!\u0026rdquo; | socat - EXEC:\u0026rsquo;logger -p local0.notice')\n使用socat在终端和串行设备之间进行双向传输：socat -d -d /dev/ttyS0,raw,echo=0 \u0026ldquo;PTY,link=$HOME/.socat_pty,raw,echo=0\u0026rdquo;\n使用socat将HTTP请求发送到远程主机：socat TCP:www.example.com:80,shut-none\n使用socat将HTTP请求发送到本地HTTP代理：echo \u0026ldquo;GET / HTTP/1.1\\r\\nHost: www.example.com\\r\\n\\r\\n\u0026rdquo; | socat - TCP:localhost:8080\n使用socat将网络文件传输到本地：socat TCP:www.example.com:80 FILE:/path/to/save/file.txt\n请注意，socat的使用方法非常灵活，可以通过结合不同的选项和参数来满足不同的需求。以上仅列举了一些常见的使用方法和实例，更多高级的用法可以通过参考socat的文档进行学习。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"ss的使用方法 SS（Shadowsocks）是一种被广泛用于科学上网的代理工具，在CentOS中安装可以通过以下步骤进行：\n打开终端，使用root权限登录系统。 安装Python包管理工具pip：yum install python-pip。 安装shadowsocks：pip install shadowsocks。 创建配置文件：vi /etc/shadowsocks.json。 在配置文件中输入以下内容： 1 2 3 4 5 6 7 { \u0026#34;server\u0026#34;: \u0026#34;服务器IP地址\u0026#34;, \u0026#34;server_port\u0026#34;: 8388, \u0026#34;password\u0026#34;: \u0026#34;密码\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;加密方法\u0026#34;, \u0026#34;timeout\u0026#34;: 300 } 启动Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d start。 使用方法：\n启动Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d start。 停止Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d stop。 重启Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d restart。 查看Shadowsocks服务运行状态：ssserver -c /etc/shadowsocks.json -d status。 修改Shadowsocks配置文件：vi /etc/shadowsocks.json，然后重启服务。 添加用户：ssserver -c /etc/shadowsocks.json -d add_user 用户名 密码。 修改用户密码：ssserver -c /etc/shadowsocks.json -d modify_user_password 用户名 新密码。 删除用户：ssserver -c /etc/shadowsocks.json -d del_user 用户名。 查看当前连接数和连接信息：ssserver -c /etc/shadowsocks.json -d show_connections。 查看日志：tail -f /var/log/shadowsocks.log。 指定配置文件启动Shadowsocks服务：ssserver -c /path/to/config.json -d start。 使用HTTP代理模式启动Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d start --plugin obfs-server --plugin-opts \u0026quot;obfs=http;obfs-host=www.example.com\u0026quot;。 使用UDP转发模式启动Shadowsocks服务：ssserver -c /etc/shadowsocks.json -d start --udp-relay。 通过服务端提供的HTTP API接口修改配置：curl -X POST -d '{\r\u0026quot;server\u0026quot;:\u0026quot;服务器IP地址\u0026quot;,\r\u0026quot;server_port\u0026quot;:8388,\r\u0026quot;password\u0026quot;:\u0026quot;新密码\u0026quot;,\r\u0026quot;method\u0026quot;:\u0026quot;加密方法\u0026quot;,\r\u0026quot;timeout\u0026quot;:300\r}' http://127.0.0.1:4040/udpate。 使用ss-local作为本地代理客户端：ss-local -c /etc/shadowsocks.json -l 1080。 使用ss-redir作为本地透明代理客户端：ss-redir -c /etc/shadowsocks.json -l 1080 -u -f /var/run/shadowsocks.pid。 使用ss-tunnel作为本地DNS加密代理客户端：ss-tunnel -c /etc/shadowsocks.json -l 5353 -L 8.8.8.8:53 -u -f /var/run/shadowsocks.pid。 使用ss-manager作为服务器管理工具：ss-manager -c /etc/shadowsocks.json -u -f /var/run/shadowsocks.pid。 使用ss-nat作为NAT透明代理服务器：ss-nat -s 0.0.0.0 -G 0.0.0.0 -l 1080 -u -f /var/run/shadowsocks.pid。 使用ss-pcap作为抓包工具：ss-pcap -i eth0 -o packet.pcap -U -g 'dst port 80'。 以上是SS工具的常用使用方法和实例，不同实例适用于不同的需求和场景。请根据自己的需求选择合适的命令进行操作。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"systemctl的使用方法 systemctl是CentOS、Fedora和其他系统中用于管理系统服务的命令。下面是systemctl的常用使用方法和实例：\n启动服务：systemctl start 服务名 例如： systemctl start httpd启动Apache HTTP服务器。\n停止服务：systemctl stop 服务名 例如： systemctl stop httpd停止Apache HTTP服务器。\n重启服务：systemctl restart 服务名 例如： systemctl restart httpd重启Apache HTTP服务器。\n查看服务状态：systemctl status 服务名 例如： systemctl status httpd查看Apache HTTP服务器的状态。\n启用服务：systemctl enable 服务名 例如： systemctl enable httpd在系统启动时自动启用Apache HTTP服务器。\n禁用服务：systemctl disable 服务名 例如： systemctl disable httpd在系统启动时禁用Apache HTTP服务器。\n查看所有已启用的服务：systemctl list-unit-files --type=service --state=enabled\n查看所有正在运行的服务：systemctl list-units --type=service --state=running\n查看所有服务的状态：systemctl list-units --type=service --all\n查看服务的依赖关系：systemctl list-dependencies 服务名 例如： systemctl list-dependencies httpd查看Apache HTTP服务器的依赖关系。\n查看服务的日志：journalctl -u 服务名 例如： journalctl -u httpd查看Apache HTTP服务器的日志。\n显示服务的详细信息：systemctl show 服务名 例如： systemctl show httpd显示Apache HTTP服务器的详细信息。\n查看服务的启动日志：journalctl -u 服务名 --since today 例如： journalctl -u httpd --since today查看Apache HTTP服务器今天的启动日志。\n设置服务的开机启动顺序：systemctl set-default 服务名 例如： systemctl set-default multi-user.target设置系统的默认目标为多用户模式。\n查看默认的目标：systemctl get-default\n切换目标：systemctl isolate 目标名 例如： systemctl isolate graphical.target切换到图形界面模式。\n重载systemctl配置：systemctl daemon-reload 例如： systemctl daemon-reload重载systemctl配置。\n显示服务的加载状态：systemctl show-environment 例如： systemctl show-environment显示服务的加载状态。\n查找特定服务：systemctl list-unit-files | grep 服务名 例如： systemctl list-unit-files | grep httpd查找所有与httpd相关的服务。\n查看服务所属的切片：systemctl show 服务名 -p Slice 例如： systemctl show httpd -p Slice查看httpd服务所属的切片。\n这些是systemctl的一些常用使用方法和实例，可用于管理和监控CentOS系统中的服务。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"tmux的使用方法 tmux是一个终端复用工具，它允许用户在单个终端窗口中使用多个终端会话。以下是tmux的常用使用方法：\n安装tmux： 在CentOS中，可以使用以下命令来安装tmux：\n1 sudo yum install tmux 启动tmux会话： 在终端中输入以下命令来启动tmux会话：\n1 tmux 创建新窗口： 按下Ctrl+b，然后按下c来创建一个新的窗口。\n切换窗口： 按下Ctrl+b，然后使用n和p来切换到下一个和上一个窗口。\n关闭窗口： 在要关闭的窗口中，按下Ctrl+b，然后按下\u0026amp;来关闭当前窗口。\n分割窗口： 按下Ctrl+b，然后按下%垂直分割当前窗口，按下\u0026quot;水平分割当前窗口。\n切换窗格： 按下Ctrl+b，然后使用方向键或o来切换到不同的窗格。\n调整窗格大小： 按下Ctrl+b，然后按住Ctrl，同时使用方向键来调整当前窗口的大小。\n重命名窗口： 按下Ctrl+b，然后按下,来重命名当前窗口。\n列出窗口： 按下Ctrl+b，然后按下l来列出所有窗口。\n在窗格中执行命令： 按下Ctrl+b，然后输入:进入命令行模式，在命令行中输入要在当前窗格中执行的命令。\n分离会话： 按下Ctrl+b，然后按下d来分离当前会话。\n重新连接会话： 输入以下命令重新连接到先前分离的会话：\n1 tmux attach 查看帮助： 按下Ctrl+b，然后按下?来查看tmux的帮助文档。\n复制模式： 按下Ctrl+b，然后按下[进入复制模式，使用方向键选择要复制的文本，按下Enter复制选中的文本。\n粘贴复制的文本： 按下Ctrl+b，然后按下]进行粘贴复制的文本。\n注销会话： 按下Ctrl+b，然后输入:进入命令行模式，在命令行中输入kill-session来注销当前会话。\n设置窗口标题： 按下Ctrl+b，然后输入:进入命令行模式，在命令行中输入set-window-option -g automatic-rename on来启用自动命名窗口。\n保存会话： 按下Ctrl+b，然后输入:进入命令行模式，在命令行中输入save-buffer \u0026lt;文件名\u0026gt;来保存当前会话的状态到一个文件。\n恢复会话： 输入以下命令恢复先前保存的会话：\n1 tmux source-file \u0026lt;文件名\u0026gt; 这些是tmux的常用使用方法，你可以根据自己的需求和喜好来运用它。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"top的使用方法 top是一个用于监视系统资源和进程的命令行工具。在CentOS中，您可以通过以下命令安装top：\n1 sudo yum install -y procps-ng 以下是top的常用使用方法和实例：\n查看系统总体资源使用情况：打开终端，输入top命令，会显示系统总体资源使用情况，包括CPU使用率、内存使用情况、进程数量等。\n实时查看CPU占用最高的进程：在top界面中，按下Shift + P，按CPU使用率排序，并且最高的进程会出现在最上面。\n实时查看内存占用最高的进程：在top界面中，按下Shift + M，按内存使用情况排序，并且最高的进程会出现在最上面。\n查看指定进程的详细信息：在top界面中，按下Shift + F，然后按下j，然后输入进程的PID，并按下回车，可以查看指定进程的详细信息。\n根据CPU使用率显示进程列表：在top界面中，按下Shift + f，然后按下P，按照CPU使用率进行排序。\n根据内存使用情况显示进程列表：在top界面中，按下Shift + f，然后按下M，按照内存使用情况进行排序。\n移除或显示特定用户的进程：在top界面中，按下Shift + u，然后输入用户名，可以选择显示或隐藏该用户的进程。\n查看特定进程树：在top界面中，按下Shift + t，可以显示进程树视图，以及每个进程的父进程ID。\n查看特定用户的所有进程：在top界面中，按下Shift + u，然后按下u，再次按下Enter，可以查看特定用户的所有进程。\n设置top显示的进程数量：在top界面中，按下Shift + e，然后输入数字，可以设置显示的进程数量。\n设置top的刷新频率：在top界面中，按下s，然后输入一个新的刷新频率（单位为秒），按下Enter，可以改变top的刷新频率。\n将top的运行结果输出到文件：在终端中运行下面的命令，可以将top的运行结果输出到文件：\n1 top -b -n 1 \u0026gt; top_result.txt 以上是top的常用使用方法和实例，可以帮助您监视和管理系统资源和进程。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"umount的使用方法 umount命令用于卸载（取消挂载）已经挂载的文件系统。\n常用的umount命令的使用方法如下：\n卸载指定的挂载点：\n1 umount \u0026lt;挂载点路径\u0026gt; 例如，卸载挂载点为\u0026quot;/mnt/usb\u0026quot;的文件系统：\n1 umount /mnt/usb 卸载指定设备的挂载点：\n1 umount \u0026lt;设备路径\u0026gt; 例如，卸载设备路径为\u0026quot;/dev/sdb1\u0026quot;的文件系统：\n1 umount /dev/sdb1 强制卸载挂载点，即使挂载点正在使用中：\n1 umount -f \u0026lt;挂载点路径\u0026gt; 例如，强制卸载挂载点为\u0026quot;/mnt/usb\u0026quot;的文件系统：\n1 umount -f /mnt/usb 显示卸载过程的详细信息：\n1 umount -v \u0026lt;挂载点路径\u0026gt; 例如，显示卸载过程的详细信息，并卸载挂载点为\u0026quot;/mnt/usb\u0026quot;的文件系统：\n1 umount -v /mnt/usb 使用mount点卸载所有挂载点：\n1 umount -a 例如，卸载所有已经挂载的文件系统：\n1 umount -a 在所有挂载点都卸载后，重启系统：\n1 umount -ar 例如，卸载所有已经挂载的文件系统后重启系统：\n1 umount -ar 按指定顺序卸载所有挂载点：\n1 umount -O \u0026lt;顺序文件\u0026gt; 例如，使用\u0026quot;/etc/umount.order\u0026quot;文件定义的顺序卸载所有挂载点：\n1 umount -O /etc/umount.order 显示文件系统的卸载状态：\n1 umount -l 例如，显示文件系统的卸载状态：\n1 umount -l 显示umount命令的帮助信息：\n1 umount -h 以上是umount命令的一些常用使用方法和实例。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"uptime的使用方法 uptime是一个用于显示系统运行时间和负载平均值的命令行工具。\n常见使用方法：\n打开终端，并输入命令 \u0026ldquo;uptime\u0026rdquo;，系统会显示当前的时间、系统已运行的时间以及系统的平均负载情况。 使用 \u0026ldquo;-s\u0026rdquo; 选项，命令 \u0026ldquo;uptime -s\u0026rdquo; 可以显示系统的启动时间。 使用 \u0026ldquo;-p\u0026rdquo; 选项，命令 \u0026ldquo;uptime -p\u0026rdquo; 可以以易读的方式显示系统已运行的时间。 使用 \u0026ldquo;-h\u0026rdquo; 选项，命令 \u0026ldquo;uptime -h\u0026rdquo; 可以在输出中包含两个字母的主机名。 使用 \u0026ldquo;-V\u0026rdquo; 选项，命令 \u0026ldquo;uptime -V\u0026rdquo; 可以显示 uptime 的版本信息。 常用实例：\n获取系统运行时间和平均负载：uptime 获取系统的启动时间：uptime -s 以易读的方式显示系统已运行的时间：uptime -p 在输出中包含两个字母的主机名：uptime -h 显示 uptime 的版本信息：uptime -V 通过以上的使用方法和实例，你可以更好地了解和使用 uptime 工具。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"userdel的使用方法 userdel命令用于删除系统中的用户账号。下面是userdel命令的常用使用方法和常用示例：\n删除用户账号（不删除用户的主目录）： userdel username 例如：userdel testuser\n删除用户账号及其主目录： userdel -r username 例如：userdel -r testuser\n指定其他用户的密码作为提示： userdel -Z username 例如：userdel -Z testuser\n仅从系统文件中删除用户账号（不破坏用户的家目录和email文件）： userdel -f username 例如：userdel -f testuser\n删除用户账号时显示详细信息： userdel -v username 例如：userdel -v testuser\n强制删除用户账号，即使用户正在登录： userdel -f -r username 例如：userdel -f -r testuser\n仅从系统文件中删除用户账号，而不检查相关进程： userdel -Zf username 例如：userdel -Zf testuser\n删除用户账号时不提示确认： userdel -f -r -Z username 例如：userdel -f -r -Z testuser\n删除用户账号之前运行一个脚本： userdel -p pre_script -r username 例如：userdel -p /path/to/pre_script.sh -r testuser\n指定一个备份目录，将用户的主目录备份到该目录中： userdel -b backup_directory -r username 例如：userdel -b /backup -r testuser\n列出将要删除的用户账号信息： userdel -D username 例如：userdel -D testuser\n从文件中批量删除用户账号： userdel -l username_file 例如：userdel -l /path/to/username_file\n仅删除用户账号的密码，保留用户账号但不能登录： userdel -p username 例如：userdel -p testuser\n删除用户账号但保留其家目录中的文件： userdel -m username 例如：userdel -m testuser\n删除目标用户的主组： userdel -g username 例如：userdel -g testuser\n删除用户的附加组： userdel -G groupname username 例如：userdel -G admin testuser\n确保用户主目录的内容保持不变，而只删除用户： userdel -s username 例如：userdel -s testuser\n强制删除指定组的用户： userdel --force -g groupname 例如：userdel --force -g testgroup\n删除指定 shell 的用户账号： userdel -s /bin/shell username 例如：userdel -s /bin/bash testuser\n删除用户的所有邮箱： userdel -m -e username 例如：userdel -m -e testuser\n请注意，使用userdel命令需要root权限。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"wc的使用方法\nwc命令用于统计文本文件的行数、字数和字符数。 基本语法：wc [选项] [文件]，选项可选，文件是要统计的文件列表。 常用选项： -l 或 \u0026ndash;lines: 输出行数。 -w 或 \u0026ndash;words: 输出字数。 -c 或 \u0026ndash;bytes: 输出字符数。 -m 或 \u0026ndash;chars: 输出字符数（和-c选项相同）。 -L 或 \u0026ndash;max-line-length: 输出最长行的长度。 -s 或 \u0026ndash;summarize: 输出文件总计行数、字数和字符数。 -h 或 \u0026ndash;help: 显示帮助信息。 示例： 统计文件的行数：wc -l file.txt 统计文件的字数：wc -w file.txt 统计文件的字符数：wc -c file.txt 统计多个文件的行数、字数和字符数：wc -l -w -c file1.txt file2.txt 输出文件总计行数、字数和字符数：wc -l -w -c -s file1.txt file2.txt 输出最长行的长度：wc -L file.txt ","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"wget的使用方法 wget是一个常用的命令行工具，用于从网络上下载文件。它支持HTTP、HTTPS和FTP协议，并且具有断点续传的功能。\n常用的使用方法有：\n下载文件：wget [URL]，例如：wget https://example.com/file.zip。\n下载到指定文件名：wget -O [文件名] [URL]，例如：wget -O myfile.zip https://example.com/file.zip。\n后台下载文件：wget -b [URL]，下载过程会在后台运行。\n断点续传：如果下载中断，重新运行相同的wget命令，它会从中断的地方继续下载。\n限速下载：wget \u0026ndash;limit-rate=[速度] [URL]，例如：wget \u0026ndash;limit-rate=200k https://example.com/file.zip，限制下载速度为200KB/s。\n下载列表中的多个文件：将要下载的文件的URL保存在一个文件中，使用wget -i [文件名]命令下载。\n递归下载：wget -r [URL]，下载指定URL下的所有文件和子目录。\n忽略robots.txt文件：wget -e robots=off [URL]，默认情况下，wget会遵守网站的robots.txt文件，使用该选项可以忽略该文件。\n执行后续命令：下载完成后，可以指定执行一个指定的命令，例如：wget -O myfile.zip https://example.com/file.zip; echo \u0026lsquo;Download finished!\u0026rsquo;。\n显示详细进度信息：wget \u0026ndash;progress=bar:force [URL]，显示以进度条的形式下载的进度。\n限制重定向次数：wget \u0026ndash;max-redirect=[次数] [URL]，限制重定向的最大次数。\n静默模式：wget -q [URL]，禁止任何输出。\n设置用户代理：wget \u0026ndash;user-agent=\u0026quot;[用户代理]\u0026quot; [URL]，设置HTTP头部中的User-Agent字段。\n下载网页中的所有媒体文件：wget -p -k -nd -H -e robots=off -A [文件类型] -R [排除文件类型] [URL]，这个命令会下载指定URL网页中的所有媒体文件，如图片、音频、视频等。\n防止服务器主机休眠：wget -c [URL]，如果服务器主机休眠，该选项会持续尝试连接。\n使用代理服务器：wget \u0026ndash;proxy=on/off \u0026ndash;proxy-user=[用户名] \u0026ndash;proxy-password=[密码] [URL]，可以使用该命令来使用代理服务器下载文件。\n后台持续下载：wget \u0026ndash;continue -b [URL]，即使在断开ssh连接后，也会继续在后台进行下载。\n验证下载文件的完整性：wget \u0026ndash;content-disposition [URL]，可以验证文件的完整性并保存到正确的位置。\n下载完整的目录结构：wget \u0026ndash;no-parent -r [URL]，下载指定URL下的所有子目录以及文件。\n解析robots.txt文件：使用wget -qO- [URL]/robots.txt命令可以查看一个网站的robots.txt文件的内容。\n安装wget：在CentOS上，可以使用以下命令安装wget：\n1 sudo yum install wget 这样就可以使用wget命令了。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""},{"content":"yum的使用方法 yum是CentOS中常用的包管理工具，用于安装、升级、删除软件包以及解决软件包的依赖关系。下面是yum的常用使用方法和实例：\n安装软件包：使用yum install命令安装指定的软件包，例如：yum install package_name。\n升级软件包：使用yum update命令升级所有已安装的软件包，例如：yum update。\n搜索软件包：使用yum search命令搜索可用的软件包，例如：yum search keyword。\n列出已安装的软件包：使用yum list installed命令列出所有已安装的软件包，例如：yum list installed。\n删除软件包：使用yum remove命令删除指定的软件包，例如：yum remove package_name。\n清理缓存：使用yum clean命令清理yum缓存，例如：yum clean all。\n解决软件包依赖关系：使用yum deplist命令列出指定软件包的依赖关系，例如：yum deplist package_name。\n列出可用的仓库：使用yum repolist命令列出所有可用的yum仓库，例如：yum repolist。\n启用/禁用仓库：使用yum-config-manager命令启用或禁用指定的yum仓库，例如：yum-config-manager \u0026ndash;disable repository_name。\n更新仓库信息：使用yum clean metadata命令更新yum仓库的元数据，例如：yum clean metadata。\n查看软件包信息：使用yum info命令查看指定软件包的详细信息，例如：yum info package_name。\n安装指定版本的软件包：使用yum install package_name-version命令安装指定版本的软件包，例如：yum install package_name-1.0.0。\n使用本地源安装软件包：使用yum localinstall命令从本地源安装软件包，例如：yum localinstall package.rpm。\n配置代理服务器：使用yum-config-manager命令配置代理服务器，例如：yum-config-manager \u0026ndash;setopt=http_proxy=http://proxy.example.com:8080。\n安装软件包组：使用yum groupinstall命令安装指定的软件包组，例如：yum groupinstall group_name。\n升级指定软件包组：使用yum update group_name命令升级指定的软件包组，例如：yum update group_name。\n下载软件包但不安装：使用yumdownloader命令下载软件包但不安装，例如：yumdownloader package_name。\n查看软件包提供的文件：使用yum provides命令查看指定文件属于哪个软件包，例如：yum provides /usr/bin/ls。\n配置软件包优先级：使用yum-plugin-priorities插件配置软件包的优先级，以解决软件包冲突问题。\n导出已安装软件包的列表：使用yum list installed \u0026gt; packages.txt命令将已安装的软件包列表导出到文件中。\n这些是yum的一些常用和常见的使用方法和实例，可以满足日常的软件包管理需求。\n","date":"0001-01-01T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/","title":""}]